// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// In this project we will use prisma as an ORM for ease of use as well as security
// BTW please setup redis for caching and rate limiting
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  userId   String @id @default(auto()) @map("_id") @db.ObjectId 
  name     String
  email    String  @unique
  avatar   String?
  password String

  projectIds String[] @db.ObjectId //prisma
  projects Project[] @relation(fields: [projectIds], references: [projectId]) //prisma

  comments Comment[] //prisma
}

model Project {
  projectId    String  @id @default(auto()) @map("_id") @db.ObjectId
  adminId      String
  title        String
  history      String[]

  userIds      String[] @db.ObjectId
  users        User[] @relation(fields: [userIds], references: [userId])

  tagIds       String[] @db.ObjectId
  tags         Tag[] @relation(fields: [tagIds], references: [tagId])

  stageIds     String[] @db.ObjectId
  stages       Stage[] @relation(fields: [stageIds], references: [stageId])
}

model Ticket {
  ticketId String @id @default(auto()) @map("_id") @db.ObjectId   
  title    String
  description String?    
  creatorId    String
  parentTicketId String? @map("parentTicket")
  childTickets  String[] @map("childTickets")  
  assignedUserIds String[] @map("assignedTo")
  deadline DateTime?  

  stageId String[] @db.ObjectId
  stage Stage[] @relation(fields: [stageId], references: [stageId])

  comment Comment[] //prisma
}

model Tag {
  tagId    String @id @default(auto()) @map("_id") @db.ObjectId
  title    String  
  priority Int   
  colour    String? 

  projectIds String[] @db.ObjectId //prisma
  projects Project[] @relation(fields: [projectIds], references: [projectId]) //prisma
}

model Stage {
  stageId String   @id @default(auto()) @map("_id") @db.ObjectId
  title   String

  ticketIds String[] @db.ObjectId
  tickets Ticket[]  @relation(fields: [ticketIds], references: [ticketId])

  projectIds String[] @db.ObjectId
  projects Project[] @relation(fields: [projectIds], references: [projectId])
}

model Comment {
  commentId String   @id @default(auto()) @map("_id") @db.ObjectId
  content  String

  author   User     @relation(fields: [authorId], references: [userId])
  authorId String   @db.ObjectId

  ticket   Ticket   @relation(fields: [ticketId], references: [ticketId])
  ticketId String   @db.ObjectId

  
}